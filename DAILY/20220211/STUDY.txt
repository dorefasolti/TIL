* MyBatis에서 #{}과 ${}의 차이점



타입 예외 보고

설명 서버가, 해당 요청을 충족시키지 못하게 하는 예기치 않은 조건을 맞닥뜨렸습니다.

예외

org.apache.ibatis.exceptions.PersistenceException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: ORA-00904: "AB": invalid identifier

### The error may exist in /mappers/board-mapper.xml
### The error may involve boardMapper.selectSearchList-Inline
### The error occurred while setting parameters
### SQL: SELECT       BOARD_NO      , BOARD_TITLE      , USER_ID      , COUNT      , CREATE_DATE  FROM BOARD B  JOIN MEMBER ON(BOARD_WRITER = USER_NO)  WHERE B.STATUS = 'Y'       and user_id         like '%' || ab || '%'  ORDER BY      BOARD_NO DESC
### Cause: java.sql.SQLSyntaxErrorException: ORA-00904: "AB": invalid identifier

	org.apache.ibatis.exceptions.ExceptionFactory.wrapException(ExceptionFactory.java:30)
	org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:153)
	org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:145)
	com.kh.mybatis.board.model.dao.BoardDao.selectSearchList(BoardDao.java:83)
	com.kh.mybatis.board.model.service.BoardServiceImpl.selectSearchList(BoardServiceImpl.java:99)
	com.kh.mybatis.board.controller.BoardSearchController.doGet(BoardSearchController.java:55)
	javax.servlet.http.HttpServlet.service(HttpServlet.java:655)
	javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	com.kh.mybatis.common.filter.EncodingFilter.doFilter(EncodingFilter.java:41)
근본 원인 (root cause)

java.sql.SQLSyntaxErrorException: ORA-00904: "AB": invalid identifier



* mapper에서 #{}을 사용해야 하는 부분에 ${}를 사용했을 경우 발생하는 오류메시지
왜 다른 오류가 아니라 Syntax에러가 발생하는지 궁금해서 찾아봄

select 엘리멘트 속성에는
statementType가 있음
공식문서에 따르면 다음과 같은 기능을 함 => STATEMENT, PREPARED 또는 CALLABLE 중 하나를 선택할 수 있다. 마이바티스에게 Statement, PreparedStatement 또는 CallableStatement를 사용하게 한다. 디폴트는 PREPARED이다.

디폴트는 PreparedStatement!

줄여서 pstmt!

pstmt는 sql구문을 작성할 떄 ?를 이용하고, 다음에 채워넣어주는 방식
예) SELECT * FROM MEMBER WHERE USERID = ?

pstmt.setString(1, userId);

이런 식으로 물음표를채워주는것!


statement 방식은 SQL구문 작성 시 값도 한번에 넣어주는 방식
"SELECT * FROM MEMBER WHERE USERID = '" + userId + "'";


pstmt는 문자열을 넣고 싶을 때 setXXX를 이용해 자료형을 지정하고 값을 넣어주지만,
stmt는 문자열을 넣고 싶을 경우 ''를 직접 붙여서 넣어줘야 함
=> 값을 처리하는 방식이 다름

방식이!다른데!어떻게!오류가!안나요!

user_id         like '%' || ab || '%' 

오류메시지를 확인해보면,
문자열 검색 시 홑따옴표가 검색어를 감싸주어야 하는데, 문자임에도 ''로 감싸지지 않아 오류 발생
검색어가 숫자일 경우, 'ad'로 직접 감싸줄 경우에는 오류가 발생하지 않는다
