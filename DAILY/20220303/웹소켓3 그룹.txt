
-- 서버 -- 


package com.kh.ws;

import java.util.Set;
import java.util.concurrent.CopyOnWriteArraySet;

import org.springframework.web.socket.CloseStatus;
import org.springframework.web.socket.TextMessage;
import org.springframework.web.socket.WebSocketSession;
import org.springframework.web.socket.handler.TextWebSocketHandler;

/*
 * 접속한 사용자 기억해두고 모두에 대한 처리를 수행하는 서버
*/
public class WebSocketGroupServer extends TextWebSocketHandler{
	/*
	 * 사용자를 기억하기 위한 저장소
	 * - 중복 불가
	 * - 동기화 지원
	 * 
	*/
	private Set<WebSocketSession> users = new CopyOnWriteArraySet<WebSocketSession>();
	
	@Override
	public void afterConnectionEstablished(WebSocketSession session) throws Exception{
		users.add(session);
		System.out.println("사용자 접속 ! : 현재 " + users.size() + "명");
	}
	@Override
	protected void handleTextMessage(WebSocketSession session, TextMessage message) throws Exception{
		//메시지를 모든 사용자에게 전송(사용자수만큼반복하여전송)
		
		TextMessage newMessage = new TextMessage(message.getPayload());
		//session.sendMessage(message); //메시지를 보낸 놈한테 다시 메시지 보낼것
		
		for(WebSocketSession ws : users) {
			ws.sendMessage(newMessage);
		}
	}
	
	@Override
	public void afterConnectionClosed(WebSocketSession session, CloseStatus status) throws Exception{
		users.remove(session);
		System.out.println("사용자 종료! 현재 " + users.size() + "명");
		
	}

}








--  jsp --
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
   <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
<title>Insert title here</title>
</head>
<body>
	<h1>ㅎ2</h1>
	<button onclick="connect();">접속</button>
	<button onclick="disconnect();">종료</button>
	
	
	<script>
	
		var socket;
		//웹소켓 접속 함수
		function connect(){
			var uri = "ws://localhost:8008/ws/gr";
			socket = new WebSocket(uri);
			
			//연결이 되었는지 안되었는지 확인할 수 있도록 예약작업(콜백)을 설정
			socket.onopen = function(){
				console.log("서버와연결");
			}
			socket.onclose = function(){
				console.log("서버와연결종료");
			}
			socket.onerror = function(e){
				console.log("오타남;");
			}
			socket.onmessage = function(e){
				//console.log("메시지도착ㅎ");
				//console.log(e.data);
				var div = $("<div></div>");
				div.text(e.data);
				$(".message-wrap").append(div);
			}
		}
		
		//웹소켓 종료함수
		function disconnect(){
			socket.close();
		}
		

		//메시지 전송 함수 : 입력된 글자를 불러와서 서버에 전송
		function send(){
			var text = $("#chat-input").val();
			if(!text){
				return;
			}
			socket.send(text);
			$("#chat-input").val("");
		}
	</script>
	
	<hr>
	<input type="text" id="chat-input">
	<button onclick="send();">전송</button>
	
	<!-- 수신될 메시지 출력 영역 -->
	<div class="message-wrap">
	
	</div>
	
</body>
</html>