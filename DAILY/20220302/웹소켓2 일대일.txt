servlet-context
	<beans:bean id="basicServer" class="com.kh.ws.WebSocketBasicServer" />

	
	<websocket:handlers>
		<!-- 접속 주소는 ws://localhost:8008/ws/sc -->
		<websocket:mapping handler="basicServer" path="sc"/> <!-- 내가 만든 웹소켓을 연결시켜주겠다 handler : 처리기 / path : 경로-->
	</websocket:handlers>
	


package com.kh.ws;

import org.springframework.web.socket.CloseStatus;
import org.springframework.web.socket.TextMessage;
import org.springframework.web.socket.WebSocketSession;
import org.springframework.web.socket.handler.TextWebSocketHandler;

/*
 * 웹 소켓(web Socket)
 * 
 * - Web에서 수행하는 Socket통신
 * - 기본적으로 Web은 비연결형 통신이라는 특징을 가지고 있다. 커넥트리스
 * 웹툰 보다가 인터넷선 뽑아버림!!!! 내가 보고있던 화면은 그대로 보임 왜? 내가 요청해서 받았음 이미 
 * 
 * - socket 통신은 연결형 통신
 * 채팅, 주식, 코인 속도가 빠르고 신뢰가 높은
 * 순간순간 바뀌는 값이 중요해서 믿을 수 있어야 하는
 * 비연결일 경우 내가 요청해야 바뀌는 것이라 웹소켓을 사용하면 더 좋을 수 있다
 * 
 * - 기본 통신은 HTTP로 진행하고 필요 시 WebSocket을 사용
 * 그룹콜은 웹소켓 카톡은 http 동시에 되지만 따로
 * 
 * 스프링 4 이상부터는 스프링에서 웹소켓 지원
 * 
 * 
 * 
*/

/*
 * 웹소켓의 기본적인 이해를 돕기 위해 만든 서버
 * - WebSocketServer를 만들기 위해서는 특정 클래스 / 인터페이스 상속 필요 (둘 다 가능)
 * 
 * 
*/
//public class WebSocketBasicServer implements WebSocketHandler{
public class WebSocketBasicServer extends TextWebSocketHandler{
	
	/*
	 * 접속 시 실행되는 메소드(특정 상황에 실행되는 코드) => 콜백
	 * -session : 접속한 사용자의 웹소켓 정보(HttpSession이 아님)
	 * 
	 *  
	*/
	@Override
	public void afterConnectionEstablished(WebSocketSession session) throws Exception{
		System.out.println("접속");
		System.out.println("session : " + session);
	}
	
	/*
	 * 메시지 수신 시 실행될 메소드
	 * -session : 접속한 사용자의 웹소켓 정보(HttpSession이 아님)
	 * message : TextMessage payload=[zzzz], byteCount=4, last=true]
	 * -message : 사용자가 전송한 메시지 정보
	 * 			-payload : 실제 보낸 내용
	 * 			-byteCount : 보낸 메시지의 크기(byte)
	 * 			-last : 메시지의 종료 여부
	*/
	@Override
	protected void handleTextMessage(WebSocketSession session, TextMessage message) throws Exception{
		System.out.println("수신");
		System.out.println("session : " + session);
		System.out.println("message : " + message);
	}
	
	/*
	 * 사용자 접속 종료 시 실행되는 메소드
	 *-session : 접속한 사용자의 웹소켓 정보(HttpSession이 아님)
	 *-status : 접속이 종료된 원인과 관련된 정보 
	*/
	@Override
	public void afterConnectionClosed(WebSocketSession session, CloseStatus status) throws Exception{
		System.out.println("종료");
		System.out.println("session : " + session);
		System.out.println("status : " + status);
	}
	
}
